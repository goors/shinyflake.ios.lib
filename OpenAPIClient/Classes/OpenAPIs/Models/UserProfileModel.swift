//
// UserProfileModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserProfileModel: Codable, JSONEncodable, Hashable {

    static let emailRule = StringRule(minLength: 0, maxLength: 100, pattern: nil)
    static let firstNameRule = StringRule(minLength: 0, maxLength: 45, pattern: nil)
    static let lastnameRule = StringRule(minLength: 0, maxLength: 45, pattern: nil)
    public var id: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var email: String
    public var firstName: String?
    public var lastname: String?
    public var emailConfirmed: Bool?
    public var hasStripeCards: Bool?
    public var hasStripeProfile: Bool?
    public var stripeId: String?
    public var title: String?
    public var deviceIdAndroid: String?
    public var deviceIdIos: String?
    public var deviceIdDesktop: String?
    public var photoId: String?

    public init(id: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, email: String, firstName: String? = nil, lastname: String? = nil, emailConfirmed: Bool? = nil, hasStripeCards: Bool? = nil, hasStripeProfile: Bool? = nil, stripeId: String? = nil, title: String? = nil, photoId: String? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.email = email
        self.firstName = firstName
        self.lastname = lastname
        self.emailConfirmed = emailConfirmed
        self.hasStripeCards = hasStripeCards
        self.hasStripeProfile = hasStripeProfile
        self.stripeId = stripeId
        self.title = title
        self.photoId = photoId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case updatedAt
        case email
        case firstName
        case lastname
        case emailConfirmed
        case hasStripeCards
        case hasStripeProfile
        case stripeId
        case title
        case deviceIdAndroid
        case deviceIdIos
        case deviceIdDesktop
        case photoId
        
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastname, forKey: .lastname)
        try container.encodeIfPresent(emailConfirmed, forKey: .emailConfirmed)
        try container.encodeIfPresent(hasStripeCards, forKey: .hasStripeCards)
        try container.encodeIfPresent(hasStripeProfile, forKey: .hasStripeProfile)
        try container.encodeIfPresent(stripeId, forKey: .stripeId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(deviceIdAndroid, forKey: .deviceIdAndroid)
        try container.encodeIfPresent(deviceIdIos, forKey: .deviceIdIos)
        try container.encodeIfPresent(deviceIdDesktop, forKey: .deviceIdDesktop)
        try container.encodeIfPresent(photoId, forKey: .photoId)
    }
}

