//
// UserProfileModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserProfileModel: Codable, JSONEncodable, Hashable {

    static let emailRule = StringRule(minLength: 0, maxLength: 100, pattern: nil)
    static let firstNameRule = StringRule(minLength: 0, maxLength: 45, pattern: nil)
    static let lastnameRule = StringRule(minLength: 0, maxLength: 45, pattern: nil)
    public var id: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var email: String
    public var firstName: String?
    public var lastname: String?
    public var emailConfirmed: Bool?
    public var hasStripeCards: Bool?
    public var hasStripeProfile: Bool?
    public var stripeId: String?
    public var title: String?
    public var deviceId: String?
    public var deviceType: UserDeviceType
    public var photoId: String?
    public var shareActivities: Bool?
    public var shareProfile: Bool?

    public init(id: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, email: String, firstName: String? = nil, lastname: String? = nil, emailConfirmed: Bool? = nil, hasStripeCards: Bool? = nil, hasStripeProfile: Bool? = nil, stripeId: String? = nil, title: String? = nil, photoId: String? = nil,
                deviceId: String?, deviceType: UserDeviceType, shareActivities: Bool? = nil, shareProfile: Bool? = nil
    ) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.email = email
        self.firstName = firstName
        self.lastname = lastname
        self.emailConfirmed = emailConfirmed
        self.hasStripeCards = hasStripeCards
        self.hasStripeProfile = hasStripeProfile
        self.stripeId = stripeId
        self.title = title
        self.photoId = photoId
        self.deviceId = deviceId
        self.deviceType = deviceType
        self.shareActivities = shareActivities
        self.shareProfile = shareProfile
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case updatedAt
        case email
        case firstName
        case lastname
        case emailConfirmed
        case hasStripeCards
        case hasStripeProfile
        case stripeId
        case title
        case deviceId
        case deviceType
        case photoId
        case shareProfile
        case shareActivities
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastname, forKey: .lastname)
        try container.encodeIfPresent(emailConfirmed, forKey: .emailConfirmed)
        try container.encodeIfPresent(hasStripeCards, forKey: .hasStripeCards)
        try container.encodeIfPresent(hasStripeProfile, forKey: .hasStripeProfile)
        try container.encodeIfPresent(stripeId, forKey: .stripeId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(photoId, forKey: .photoId)
        try container.encodeIfPresent(shareActivities, forKey: .shareActivities)
        try container.encodeIfPresent(shareProfile, forKey: .shareProfile)
    }
}

