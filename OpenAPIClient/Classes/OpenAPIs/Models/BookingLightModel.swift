//
// BookingLightModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BookingLightModel: Codable, JSONEncodable, Hashable {

    public var createdAt: Date?
    public var start: Date?
    public var end: Date?
    public var amount: Float?
    public var amountPaid: Float?
    public var isPaid: Float?
    public var isPartiallyPaid: Float?
    public var isBecauseOfNoMoney: Bool?
    public var couponCode: String?
    public var publicId: String?

    public init(createdAt: Date? = nil, start: Date? = nil, end: Date? = nil, amount: Float? = nil, amountPaid: Float? = nil, isPaid: Float? = nil, isPartiallyPaid: Float? = nil, isBecauseOfNoMoney: Bool? = nil, couponCode: String? = nil, publicId: String? = nil) {
        self.createdAt = createdAt
        self.start = start
        self.end = end
        self.amount = amount
        self.amountPaid = amountPaid
        self.isPaid = isPaid
        self.isPartiallyPaid = isPartiallyPaid
        self.isBecauseOfNoMoney = isBecauseOfNoMoney
        self.couponCode = couponCode
        self.publicId = publicId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt
        case start
        case end
        case amount
        case amountPaid
        case isPaid
        case isPartiallyPaid
        case isBecauseOfNoMoney
        case couponCode
        case publicId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(end, forKey: .end)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountPaid, forKey: .amountPaid)
        try container.encodeIfPresent(isPaid, forKey: .isPaid)
        try container.encodeIfPresent(isPartiallyPaid, forKey: .isPartiallyPaid)
        try container.encodeIfPresent(isBecauseOfNoMoney, forKey: .isBecauseOfNoMoney)
        try container.encodeIfPresent(couponCode, forKey: .couponCode)
        try container.encodeIfPresent(publicId, forKey: .publicId)
    }
}

