//
// UserProfileModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActivityRecord: Codable, JSONEncodable, Hashable {

    
    public var id: UUID
    public var lng: Double
    public var lat: Double
    public var distance: Double?
    public var poi: ActivityRecordPoi?
    public var elevation: Double?
    public var dateTime: Date?
    public var duration: Double?
    public var speed: Double?
    
    
    public init(
        id: UUID,
        lng: Double,
        lat: Double,
        distance: Double? = nil,
        poi: ActivityRecordPoi? = nil,
        elevation: Double? = nil,
        dateTime: Date? = nil,
        duration: Double? = nil,
        speed: Double? = nil
        
    ) {
        self.id = id
        self.lng = lng
        self.lat = lat
        self.distance = distance
        self.poi = poi
        self.elevation = elevation
        self.dateTime = dateTime
        self.duration = duration
        self.speed = speed
        
        
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case lng
        case lat
        case distance
        case poi
        case elevation
        case dateTime
        case duration
        case speed
        
        
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lng, forKey: .lng)
        try container.encodeIfPresent(lat, forKey: .lat)
        try container.encodeIfPresent(distance, forKey: .distance)
        try container.encodeIfPresent(poi, forKey: .poi)
        try container.encodeIfPresent(elevation, forKey: .elevation)
        try container.encodeIfPresent(dateTime, forKey: .dateTime)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(speed, forKey: .speed)
        
        
    }
}
public enum ActivityRecordPoiType: Int, Codable, CaseIterable {
    case Info = 0
    case Warning = 1
    case Danger = 2
}

public struct ActivityRecordPoi: Codable, JSONEncodable, Hashable {
    
    public var id: UUID
    
    public var type: ActivityRecordPoiType
    public var text: String?
    public var title: String
    public var recording: String?
    public var photos: [String]?
   
    
    
    public init(
        id: UUID,
        type: ActivityRecordPoiType,
        text: String? = nil,
        title: String,
        recording: String?,
        photos: [String]? = nil
        
        
    ) {
        self.id = id
        self.type = type
        self.text = text
        self.title = title
        self.recording = recording
        self.photos = photos
        
        
        
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case text
        case title
        case recording
        case photos
        
        
        
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(recording, forKey: .recording)
        try container.encodeIfPresent(photos, forKey: .photos)
        
        
        
    }
}
