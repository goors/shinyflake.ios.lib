//
// ShinyFlakeChargeLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ShinyFlakeChargeLog: Codable, JSONEncodable, Hashable {

    public var amount: Int64?
    public var amountCaptured: Int64?
    public var captured: Bool?
    public var currency: String?
    public var failureCode: String?
    public var failureMessage: String?
    public var paid: Bool?
    public var createdAt: Date?
    public var id: String?
    public var amountParsed: String?
    public var amountCapturedParsed: String?
    public var metadata: [String: String]?

    public init(amount: Int64? = nil, amountCaptured: Int64? = nil, captured: Bool? = nil, currency: String? = nil, failureCode: String? = nil, failureMessage: String? = nil, paid: Bool? = nil, createdAt: Date? = nil, id: String? = nil, amountParsed: String? = nil, amountCapturedParsed: String? = nil, metadata: [String: String]? = nil) {
        self.amount = amount
        self.amountCaptured = amountCaptured
        self.captured = captured
        self.currency = currency
        self.failureCode = failureCode
        self.failureMessage = failureMessage
        self.paid = paid
        self.createdAt = createdAt
        self.id = id
        self.amountParsed = amountParsed
        self.amountCapturedParsed = amountCapturedParsed
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case amountCaptured
        case captured
        case currency
        case failureCode
        case failureMessage
        case paid
        case createdAt
        case id
        case amountParsed
        case amountCapturedParsed
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountCaptured, forKey: .amountCaptured)
        try container.encodeIfPresent(captured, forKey: .captured)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(failureCode, forKey: .failureCode)
        try container.encodeIfPresent(failureMessage, forKey: .failureMessage)
        try container.encodeIfPresent(paid, forKey: .paid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(amountParsed, forKey: .amountParsed)
        try container.encodeIfPresent(amountCapturedParsed, forKey: .amountCapturedParsed)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

