//
// AdventuresLightModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdventuresLightModel: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var title: String?
    public var subTitle: String?
    public var level: AdventuresLightModelAllOfLevel?
    public var rawData: String?
    public var text: String?
    public var coverPhoto: String?
    public var category: String?
    public var photos: [BlogPostPhoto]?
    public var videos: [String]?
    public var trekk: AnyCodable?
    public var altitudes: [Double]?
    public var activityRecords: [ActivityRecord]?
    public var start: [Double]?
    public var slug: String?
    public var commentsAllowed: Bool?
    public var isPublished: Bool?
    public var userProfile: AdventuresLightModelAllOfUserProfile?

    public init(id: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, title: String? = nil, subTitle: String? = nil, level: AdventuresLightModelAllOfLevel? = nil, rawData: String? = nil, text: String? = nil, coverPhoto: String? = nil, category: String? = nil, photos: [BlogPostPhoto]? = nil, videos: [String]? = nil, trekk: AnyCodable? = nil, altitudes: [Double]? = nil, activityRecords: [ActivityRecord]? = nil, start: [Double]? = nil, slug: String? = nil, commentsAllowed: Bool? = nil, isPublished: Bool? = nil, userProfile: AdventuresLightModelAllOfUserProfile? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.title = title
        self.subTitle = subTitle
        self.level = level
        self.rawData = rawData
        self.text = text
        self.coverPhoto = coverPhoto
        self.category = category
        self.photos = photos
        self.videos = videos
        self.trekk = trekk
        self.altitudes = altitudes
        self.activityRecords = activityRecords
        self.start = start
        self.slug = slug
        self.commentsAllowed = commentsAllowed
        self.isPublished = isPublished
        self.userProfile = userProfile
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case updatedAt
        case title
        case subTitle
        case level
        case rawData
        case text
        case coverPhoto
        case category
        case photos
        case videos
        case trekk
        case altitudes
        case activityRecords
        case start
        case slug
        case commentsAllowed
        case isPublished
        case userProfile
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(subTitle, forKey: .subTitle)
        try container.encodeIfPresent(level, forKey: .level)
        try container.encodeIfPresent(rawData, forKey: .rawData)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(coverPhoto, forKey: .coverPhoto)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(photos, forKey: .photos)
        try container.encodeIfPresent(videos, forKey: .videos)
        try container.encodeIfPresent(trekk, forKey: .trekk)
        try container.encodeIfPresent(altitudes, forKey: .altitudes)
        try container.encodeIfPresent(activityRecords, forKey: .activityRecords)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(commentsAllowed, forKey: .commentsAllowed)
        try container.encodeIfPresent(isPublished, forKey: .isPublished)
        try container.encodeIfPresent(userProfile, forKey: .userProfile)
    }
}

