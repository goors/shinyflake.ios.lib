//
// EntitySearchResultOfAdventuresLightModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EntitySearchResultOfAdventuresLightModel: Codable, JSONEncodable, Hashable {

    public var totalItemCount: Int?
    public var page: Int?
    public var pageCount: Int?
    public var accessibleTotalItemCount: Int?
    public var accessiblePageCount: Int?
    public var items: [AdventuresLightModel]?
    public var entityCounts: EntitySearchResultOfUserProfileActivityAllOfEntityCounts?

    public init(totalItemCount: Int? = nil, page: Int? = nil, pageCount: Int? = nil, accessibleTotalItemCount: Int? = nil, accessiblePageCount: Int? = nil, items: [AdventuresLightModel]? = nil, entityCounts: EntitySearchResultOfUserProfileActivityAllOfEntityCounts? = nil) {
        self.totalItemCount = totalItemCount
        self.page = page
        self.pageCount = pageCount
        self.accessibleTotalItemCount = accessibleTotalItemCount
        self.accessiblePageCount = accessiblePageCount
        self.items = items
        self.entityCounts = entityCounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalItemCount
        case page
        case pageCount
        case accessibleTotalItemCount
        case accessiblePageCount
        case items
        case entityCounts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(totalItemCount, forKey: .totalItemCount)
        try container.encodeIfPresent(page, forKey: .page)
        try container.encodeIfPresent(pageCount, forKey: .pageCount)
        try container.encodeIfPresent(accessibleTotalItemCount, forKey: .accessibleTotalItemCount)
        try container.encodeIfPresent(accessiblePageCount, forKey: .accessiblePageCount)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(entityCounts, forKey: .entityCounts)
    }
}

