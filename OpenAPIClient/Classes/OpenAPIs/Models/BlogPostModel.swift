//
// BlogPostModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BlogPostModel: Codable, JSONEncodable, Hashable {

    static let titleRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let subTitleRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let textRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: String?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var title: String
    public var subTitle: String
    public var text: String
    public var coverPhoto: String?
    public var location: GeoCoordinates
    public var commentsAllowed: Bool?
    public var photos: [BlogPostPhoto]?
    public var videos: [String]?

    public init(id: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, title: String, subTitle: String, text: String, coverPhoto: String? = nil, location: GeoCoordinates, commentsAllowed: Bool? = nil, photos: [BlogPostPhoto]? = nil, videos: [String]? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.title = title
        self.subTitle = subTitle
        self.text = text
        self.coverPhoto = coverPhoto
        self.location = location
        self.commentsAllowed = commentsAllowed
        self.photos = photos
        self.videos = videos
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case updatedAt
        case title
        case subTitle
        case text
        case coverPhoto
        case location
        case commentsAllowed
        case photos
        case videos
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(title, forKey: .title)
        try container.encode(subTitle, forKey: .subTitle)
        try container.encode(text, forKey: .text)
        try container.encodeIfPresent(coverPhoto, forKey: .coverPhoto)
        try container.encode(location, forKey: .location)
        try container.encodeIfPresent(commentsAllowed, forKey: .commentsAllowed)
        try container.encodeIfPresent(photos, forKey: .photos)
        try container.encodeIfPresent(videos, forKey: .videos)
    }
}

