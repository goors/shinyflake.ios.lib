//
// AuthUserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthUserAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authUserGetContext(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserContextModel?, _ error: Error?) -> Void)) -> RequestTask {
        return authUserGetContextWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2.0/AuthUser/Context
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT token
     - returns: RequestBuilder<UserContextModel> 
     */
    open class func authUserGetContextWithRequestBuilder() -> RequestBuilder<UserContextModel> {
        let localVariablePath = "/api/v2.0/AuthUser/Context"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserContextModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authUserGetProfile(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserProfileModel?, _ error: Error?) -> Void)) -> RequestTask {
        return authUserGetProfileWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2.0/AuthUser/Profile
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT token
     - returns: RequestBuilder<UserProfileModel> 
     */
    open class func authUserGetProfileWithRequestBuilder() -> RequestBuilder<UserProfileModel> {
        let localVariablePath = "/api/v2.0/AuthUser/Profile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserProfileModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
    
    /**

     - parameter userRegistrationModel: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authUserUpdateDeviceId(userUpdateDeviceId: UserUpdateDeviceId, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return authUserUpdateDeviceIdWithRequestBuilder(userUpdateDeviceId: userUpdateDeviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }
    
    /**
     - POST /api/v2.0/Bookings
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT token
     - parameter userBookingModel: (body)
     - returns: RequestBuilder<UserBookingResponse>
     */
    open class func authUserUpdateDeviceIdWithRequestBuilder(userUpdateDeviceId: UserUpdateDeviceId) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/v2.0/AuthUser/DeviceId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdateDeviceId)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
    
    /**

     - parameter userRegistrationModel: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authUserDeleteAccount(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return authUserDeleteAccountWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }
    
    open class func authUserDeleteAccountWithRequestBuilder() -> RequestBuilder<Bool> {
        let localVariablePath = "/api/v2.0/AuthUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
    
    
    open class func updateProfilePhoto(
        model: Data,
        completion: @escaping (Data?, URLResponse?, Any?) -> Void
    ) {
        
        updateProfilePhotoWithRequestBuilder(model: model, completionHandler: completion)
            
    }

       
    open class func updateProfilePhotoWithRequestBuilder(
        model: Data,
        
        completionHandler: @escaping (Data?, URLResponse?, Any?) -> Void)
    {
        
            let localVariablePath = "/api/v2.0/AuthUser/Photo"
            let request = MultipartFormDataRequest(url: URL(string: OpenAPIClientAPI.basePath + localVariablePath)!, headers: OpenAPIClientAPI.customHeaders["Authorization"])
        
            request.addDataField(fieldName: "Photo", fileName: "profile.jpeg", data: model, mimeType: "image/jpeg")
            
            URLSession.shared.dataTask(with: request, completionHandler: completionHandler).resume()
            
    }
    
    
    /**

     - parameter userModel: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func update(userModel: UserModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return updateWithRequestBuilder(userModel: userModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2.0/Users
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT token
     - parameter userModel: (body)
     - returns: RequestBuilder<String>
     */
    open class func updateWithRequestBuilder(userModel: UserModel) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/v2.0/AuthUser/Profile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
    
    
    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAdventureIds(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAdventureIdsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2.0/AuthUser/Profile
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT token
     - returns: RequestBuilder<UserProfileModel>
     */
    open class func getAdventureIdsWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/api/v2.0/AuthUser/Adventures/Ids"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
    
    
    
    open class func createOrUpdateAdventure(
        model: UserAdventureModel,
        completion: @escaping (Data?, URLResponse?, Any?) -> Void
    ) {
        
        createOrUpdateAdventureWithRequestBuilder(model: model, completionHandler: completion)
            
    }

       
    open class func createOrUpdateAdventureWithRequestBuilder(
        model: UserAdventureModel,
        
        completionHandler: @escaping (Data?, URLResponse?, Any?) -> Void)
    {
        
        let localVariablePath = "/api/v2.0/AuthUser/Adventures"
        let request = MultipartFormDataRequest(url: URL(string: OpenAPIClientAPI.basePath + localVariablePath)!, headers: OpenAPIClientAPI.customHeaders["Authorization"])
        
        if(model.coverImage != nil) {
            request.addDataField(fieldName: "CoverImage", fileName: "profile.jpeg", data: model.coverImage!, mimeType: "image/jpeg")
        }
        
        if(model.photos != nil) {
            for item in model.photos! {
                request.addDataField(fieldName: "Photos", fileName: "profile.jpeg", data: item, mimeType: "image/jpeg")
            }
        }
        
        request.addTextField(named: "CreatedAt", value: model.createdAt.description)
        
        if(model.name != nil) {
            request.addTextField(named: "Name", value: model.name!)
        }
        
        if(model.text != nil) {
            request.addTextField(named: "Name", value: model.text!)
        }
        
        let jsonData = try! JSONEncoder().encode(model.data)
        let jsonString = String(data: jsonData, encoding: .utf8)!
        
        request.addTextField(named: "Data", value: jsonString)
        
        if(model.category != nil) {
            request.addTextField(named: "Category", value: model.category!)
        }
        
        request.addTextField(named: "Id", value: model.id.uuidString)
            
        URLSession.shared.dataTask(with: request, completionHandler: completionHandler).resume()
            
    }
}
